const readlineSync = require('readline-sync');
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å—ë –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ.
// –ò–ª–∏ –º–æ–∂–Ω–æ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å,
// –∞ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤—Å–µ –Ω—É–∂–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –ø—Ä—è–º–æ –∏–∑ run.js –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ new Game().

const Hero = require('./game-models/Hero');
const Enemy = require('./game-models/Enemy');
// const Boomerang = require('./game-models/Boomerang');
const View = require('./View');
const Boomerang = require('./game-models/Boomerang');
const db = require('../db/models');

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∏–≥—Ä—ã.
// –¢—É—Ç –±—É–¥—É—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –ø—Ä–æ–≤–µ—Ä–∫–∏, –∑–∞–ø—É—Å–∫.

(async () => {
  try {
    await db.sequelize.authenticate();
    console.log('Connection has been established successfully.');
  } catch (error) {
    console.error('Unable to connect to the database:', error);
  }
})();

class Game {
  constructor({ trackLength }) {
    this.trackLength = trackLength;
    this.boomerang = new Boomerang(trackLength);
    this.hero = new Hero({ position: 0, boomerang: this.boomerang });
    this.enemy = new Enemy(trackLength);
    this.view = new View(this);
    this.track = [];
    this.regenerateTrack();
  }

  async name() {
    const result = await db.user.findOrCreate({
      where: { name: ${process.argv[2]} },
      defaults: { score: this.game.hero.scores },
    });
    return result;
  }

  async update() {
    const res = await db.user.update(
      { score: this.game.hero.scores },
      { where: { name: ${process.argv[2]} } },
    );
    return res;
  }

  regenerateTrack() {
    // –°–±–æ—Ä–∫–∞ –≤—Å–µ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ (–≥–µ—Ä–æ–π, –≤—Ä–∞–≥(–∏), –æ—Ä—É–∂–∏–µ)
    // –≤ –µ–¥–∏–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
    this.track = new Array(this.trackLength).fill(' ');
    this.track[this.hero.position] = this.hero.skin;
    this.track[this.enemy.position] = this.enemy.skin; // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É
    if (
      this.hero.boomerang.position >= 0
      && this.hero.boomerang.position < this.trackLength
    ) {
      this.track[this.hero.boomerang.position] = this.hero.boomerang.skin;
    }
  }

  // check() {

  // }

  play() {
    // –≤–æ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã –≤—ã–≤–æ–¥–∏—Ç—Å—è —Ñ–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è –∏–º—è –∏–≥—Ä–æ–∫–∞
    this.hero.name = readlineSync.question(
      '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –ì–µ—Ä–æ—è!\n–í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è: ',
    );
    process.stdin.resume();
    if (!this.hero.name) {
      this.hero.name = 'Anonimus';
    }

    setInterval(() => {
      // Let's play!
      this.handleCollisions();
      this.regenerateTrack();

      // –î–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–∏–∫—É –¥–≤–∏–∂–µ–Ω–∏—è –≤—Ä–∞–≥–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ª–µ–≤–æ
      this.enemy.moveLeft();

      // –ï—Å–ª–∏ –≤—Ä–∞–≥ –¥–æ—Å—Ç–∏–≥ –∫—Ä–∞—è —Ç—Ä–µ–∫–∞, –ø–µ—Ä–µ–º–µ—â–∞–µ–º –µ–≥–æ –≤ –Ω–∞—á–∞–ª–æ
      if (this.enemy.position < 0) {
        this.enemy.position = this.trackLength - 1;
      }

      this.view.render(this.track);
    }, 100); // –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
  }

  handleCollisions() {
    if (this.hero.position === this.enemy.position) {
      this.regenerateTrack();
      this.hero.position = 0;
      this.hero.lifesCount -= 1;
      if (this.hero.lifesCount === 2) {
        this.hero.lifes = '–ñ–∏–∑–Ω–∏: üíúüíúüñ§';
        this.enemy.position = 27;
      }
      if (this.hero.lifesCount === 1) {
        this.hero.lifes = '–ñ–∏–∑–Ω–∏: üíúüñ§üñ§';
        this.enemy.position = 25;
      }
      if (this.hero.lifesCount === 0) {
        this.hero.lifes = '–ñ–∏–∑–Ω–∏: üñ§üñ§üñ§';
        this.hero.die();
      }
    }

    if (this.boomerang.position === this.enemy.position) {
      this.enemy.die();
      this.hero.scores += 1;
      // –û–±–Ω—É–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –±—É–º–µ—Ä–∞–Ω–≥–∞ –ø–æ—Å–ª–µ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å –≤—Ä–∞–≥–æ–º
      // this.boomerang.position = -1;
      this.enemy = new Enemy(this.trackLength); // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –≤—Ä–∞–≥–∞
    }
  }
}

// module.exports = newHero;
module.exports = Game;
